#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    combos {
        compatible = "zmk,combos";

        Lclick {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
        };

        Rclick {
            bindings = <&mkp RCLK>;
            key-positions = <17 18>;
        };

        Uscroll {
            bindings = <&msc SCRL_UP>;
            key-positions = <7 16>;
        };

        Dscroll {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <17 26>;
        };

        Lscroll {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <17 27>;
        };

        Rscroll {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <17 28>;
        };

        toSleep {
            bindings = <&to 7>;
            key-positions = <2 11 9 18>;
            layers = <0>;
        };

        to0 {
            bindings = <&to 0>;
            key-positions = <10 11 12 13>;
        };

        toBT {
            bindings = <&to 8>;
            key-positions = <4 24 37>;
        };

        toMusescore {
            bindings = <&to 9>;
            key-positions = <30 32 31 24>;
        };

        escap {
            bindings = <&kp ESCAPE>;
            key-positions = <11 0>;
        };

        Lreset {
            bindings = <&sys_reset>;
            key-positions = <10 1 2 13>;
        };

        Rreset {
            bindings = <&sys_reset>;
            key-positions = <16 7 8 19>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <5 6>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <26 25>;
        };

        Dscroll2 {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <12 23>;
        };

        Uscroll2 {
            bindings = <&msc SCRL_UP>;
            key-positions = <2 13>;
        };

        Rscroll2 {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <13 14>;
        };

        Lscroll2 {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <12 11>;
        };

        Lback {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp TAB           &kp W         &kp E       &kp R         &kp T                                         &kp Y          &kp U  &kp I            &kp O    &kp P
&kp A             &kp S         &kp D       &kp F         &kp G                                         &kp H          &kp J  &kp K            &kp L    &mt RIGHT_SHIFT MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C       &kp V         &kp B                                         &kp N          &kp M  &mt SPACE COMMA  &kp DOT  &mt RIGHT_CONTROL SLASH
&kp LCTRL         &kp LEFT_WIN  &mt LALT Q  &lt 1 DELETE  &lt 2 SPACE  &lt 3 LS(CAPSLOCK)  &lt 4 ENTER  &kp BACKSPACE                                   &lt 3 RIGHT_CONTROL
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp TAB    &kp N7    &kp N8    &kp N9  &kp NUMBER_5                   &kp PLUS        &kp MINUS  &kp UP     &kp ASTERISK    &kp FSLH
&kp N0     &kp N4    &kp N5    &kp N6  &kp FSLH                       &msc SCRL_UP    &kp LEFT   &kp DOWN   &kp RIGHT       &kp EQUAL
&kp LSHFT  &kp N1    &kp N2    &kp N3  &kp DOT                        &msc SCRL_DOWN  &mkp LCLK  &mkp RCLK  &msc SCRL_LEFT  &msc SCRL_RIGHT
&kp LCTRL  &kp LGUI  &kp LALT  &trans  &trans        &trans  &kp RET  &kp BSPC                                              &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR    &kp PERCENT                   &kp CARET      &kp AMPERSAND      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&kp ASTERISK     &kp SPACE    &kp SPACE     &kp SPACE     &kp C_BRI_UP                  &kp SEMI       &kp DOUBLE_QUOTES  &kp LBKT              &kp RIGHT_BRACKET      &kp GRAVE
&kp LSHFT        &kp C_MUTE   &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DN                  &kp BACKSLASH  &kp LEFT           &kp RIGHT             &kp DOWN               &kp UP
&kp LCTRL        &kp LGUI     &kp LALT      &trans        &trans        &trans  &trans  &trans                                                                         &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &kp LC(TAB)     &kp LA(LEFT)  &kp UP     &kp RA(RIGHT)   &kp LC(W)
&trans  &trans  &trans  &trans  &trans                  &msc SCRL_UP    &kp LEFT      &kp DOWN   &kp RIGHT       &trans
&trans  &trans  &trans  &trans  &trans                  &msc SCRL_DOWN  &mkp LCLK     &mkp RCLK  &msc SCRL_LEFT  &msc SCRL_RIGHT
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                                                   &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1     &kp F2           &kp F3     &kp F4   &kp F5                   &none   &none  &none  &none  &none
&kp F6     &kp F7           &kp F8     &kp F9   &kp F10                  &none   &none  &none  &none  &none
&kp LSHFT  &kp PRINTSCREEN  &kp SPACE  &kp F11  &kp F12                  &none   &none  &none  &none  &none
&kp LCTRL  &kp LGUI         &kp LALT   &trans   &trans   &trans  &trans  &trans                       &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &bootloader                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        sleep {
            bindings = <
&none  &none  &none  &none  &none                &none  &none  &none  &none  &none
&none  &none  &none  &none  &none                &none  &none  &none  &none  &none
&none  &none  &none  &none  &none                &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none                       &none
            >;

            label = "sleep_mode";
        };

        bt_seting {
            bindings = <
&bt BT_CLR    &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans  &trans  &trans  &trans
&bt BT_PRV    &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans                          &trans
            >;

            label = "BT";
        };

        musescore {
            bindings = <
&kp TAB      &kp W     &kp E           &kp R     &kp T                           &kp LC(Z)     &kp LC(LEFT_PARENTHESIS)  &kp UP        &kp LC(RIGHT_PARENTHESIS)  &kp LC(Y)
&kp A        &kp S     &kp D           &kp F     &kp G                           &kp PERIOD    &kp LEFT                  &kp DOWN      &kp RIGHT                  &mt RIGHT_SHIFT O
&mt LSHFT Z  &kp X     &kp C           &kp V     &kp B                           &kp NUMBER_1  &kp NUMBER_2              &kp NUMBER_3  &kp NUMBER_4               &kp NUMBER_5
&kp LCTRL    &kp LGUI  &mt LEFT_ALT Q  &kp BSPC  &kp SPACE  &kp ESCAPE  &kp RET  &kp BSPC                                                                         &trans
            >;

            label = "SCORE";
        };
    };
};
